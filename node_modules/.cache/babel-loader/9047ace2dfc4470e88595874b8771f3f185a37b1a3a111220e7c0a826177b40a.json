{"ast":null,"code":"var _jsxFileName = \"/Users/DT/Projects/Blockchain-Healthcare/src/Healthcare.js\",\n  _s = $RefreshSig$();\n// import React, {useState, useEffect} from 'react';\n// import {ethers} from 'ethers';\n\n// const Healthcare = () => {\n//     const [provider, setProvider] = useState(null);\n//     const [signer, setSigner] = useState(null);\n//     const [contract, setContract] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [isOwner, setIsOwner] = useState(null);\n//     const [patientID, setPatientID] = useState('');\n//     const [diagnosis, setDiagnosis] = useState('');\n//     const [treatment, setTreatment] = useState('');\n//     const [patientRecords, setPatientRecords] = useState([]);\n\n//     const [providerAddress, setProviderAddress] = useState(\"\");\n//     const contractAddress = \"0xD7ACd2a9FD159E69Bb102A1ca21C9a3e3A5F771B\";\n\n//     const contractABI = [\n// \t{\n// \t\t\"inputs\": [\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"uint256\",\n// \t\t\t\t\"name\": \"patientID\",\n// \t\t\t\t\"type\": \"uint256\"\n// \t\t\t},\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"string\",\n// \t\t\t\t\"name\": \"patientName\",\n// \t\t\t\t\"type\": \"string\"\n// \t\t\t},\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"string\",\n// \t\t\t\t\"name\": \"diagnosis\",\n// \t\t\t\t\"type\": \"string\"\n// \t\t\t},\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"string\",\n// \t\t\t\t\"name\": \"treatment\",\n// \t\t\t\t\"type\": \"string\"\n// \t\t\t}\n// \t\t],\n// \t\t\"name\": \"addRecord\",\n// \t\t\"outputs\": [],\n// \t\t\"stateMutability\": \"nonpayable\",\n// \t\t\"type\": \"function\"\n// \t},\n// \t{\n// \t\t\"inputs\": [\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"address\",\n// \t\t\t\t\"name\": \"provider\",\n// \t\t\t\t\"type\": \"address\"\n// \t\t\t}\n// \t\t],\n// \t\t\"name\": \"authorizeProvider\",\n// \t\t\"outputs\": [],\n// \t\t\"stateMutability\": \"nonpayable\",\n// \t\t\"type\": \"function\"\n// \t},\n// \t{\n// \t\t\"inputs\": [],\n// \t\t\"stateMutability\": \"nonpayable\",\n// \t\t\"type\": \"constructor\"\n// \t},\n// \t{\n// \t\t\"inputs\": [],\n// \t\t\"name\": \"getOwner\",\n// \t\t\"outputs\": [\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"address\",\n// \t\t\t\t\"name\": \"\",\n// \t\t\t\t\"type\": \"address\"\n// \t\t\t}\n// \t\t],\n// \t\t\"stateMutability\": \"view\",\n// \t\t\"type\": \"function\"\n// \t},\n// \t{\n// \t\t\"inputs\": [\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"uint256\",\n// \t\t\t\t\"name\": \"patientID\",\n// \t\t\t\t\"type\": \"uint256\"\n// \t\t\t}\n// \t\t],\n// \t\t\"name\": \"getPatientRecords\",\n// \t\t\"outputs\": [\n// \t\t\t{\n// \t\t\t\t\"components\": [\n// \t\t\t\t\t{\n// \t\t\t\t\t\t\"internalType\": \"uint256\",\n// \t\t\t\t\t\t\"name\": \"recordID\",\n// \t\t\t\t\t\t\"type\": \"uint256\"\n// \t\t\t\t\t},\n// \t\t\t\t\t{\n// \t\t\t\t\t\t\"internalType\": \"string\",\n// \t\t\t\t\t\t\"name\": \"patientName\",\n// \t\t\t\t\t\t\"type\": \"string\"\n// \t\t\t\t\t},\n// \t\t\t\t\t{\n// \t\t\t\t\t\t\"internalType\": \"string\",\n// \t\t\t\t\t\t\"name\": \"diagnosis\",\n// \t\t\t\t\t\t\"type\": \"string\"\n// \t\t\t\t\t},\n// \t\t\t\t\t{\n// \t\t\t\t\t\t\"internalType\": \"string\",\n// \t\t\t\t\t\t\"name\": \"treatment\",\n// \t\t\t\t\t\t\"type\": \"string\"\n// \t\t\t\t\t},\n// \t\t\t\t\t{\n// \t\t\t\t\t\t\"internalType\": \"uint256\",\n// \t\t\t\t\t\t\"name\": \"timestamp\",\n// \t\t\t\t\t\t\"type\": \"uint256\"\n// \t\t\t\t\t}\n// \t\t\t\t],\n// \t\t\t\t\"internalType\": \"struct HealthcareRecords.Record[]\",\n// \t\t\t\t\"name\": \"\",\n// \t\t\t\t\"type\": \"tuple[]\"\n// \t\t\t}\n// \t\t],\n// \t\t\"stateMutability\": \"view\",\n// \t\t\"type\": \"function\"\n// \t}\n// ];\n\n//     // useEffect(() => {\n//     //     const connectWallet = async () => {\n//     //         try {\n//     //             const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     //             await provider.send('eth_requestAccounts', []);\n//     //             const signer = provider.getSigner();\n//     //             setProvider(provider);\n//     //             setSigner(signer);\n\n//     //             const accountAddress = await signer.getAddress();\n//     //             setAccount(accountAddress);\n\n//     //             console.log(accountAddress);\n\n//     //             const contract = new ethers.Contract(contractAddress, contractABI, signer);\n//     //             setContract(contract);\n\n//     //             const ownerAddress = await contract.getOwner();\n\n//     //             setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\n\n//     //         } catch (error) {\n//     //             console.error(\"Error connecting to wallet: \", error);\n//     //         }\n\n//     //     };\n//     //     connectWallet();\n\n//     // }, []);\n\n//     useEffect(() => {\n//     const connectWallet = async () => {\n//         try {\n//             if (typeof window.ethereum !== 'undefined') {\n//                 const provider = new ethers.providers.Web3Provider(window.ethereum);\n//                 await provider.send('eth_requestAccounts', []);\n//                 const signer = provider.getSigner();\n//                 setProvider(provider);\n//                 setSigner(signer);\n\n//                 const accountAddress = await signer.getAddress();\n//                 setAccount(accountAddress);\n\n//                 console.log(accountAddress);\n\n//                 const contract = new ethers.Contract(contractAddress, contractABI, signer);\n//                 setContract(contract);\n\n//                 const ownerAddress = await contract.getOwner();\n//                 setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\n\n//             } else {\n//                 alert('Please install MetaMask or another Ethereum wallet extension to connect.');\n//             }\n\n//         } catch (error) {\n//             console.error(\"Error connecting to wallet: \", error);\n//         }\n//     };\n//     connectWallet();\n// }, []);\n\n//     const fetchPatientRecords = async () => {\n//         try {\n//             const records = await contract.getPatientRecords(patientID);\n//             console.log(records);\n//             setPatientRecords(records);\n\n//         } catch(error) {\n//             console.error(\"Error fetching patient records\", error);\n//         }\n//     }\n\n//     // const addRecord = async () => {\n//     //     try {\n//     //         const tx = await contract.addRecord(patientID, \"Alice\", diagnosis, treatment);\n//     //         await tx.wait();\n//     //         fetchPatientRecords();\n//     //         await tx.wait();\n//     //         alert(`Provider ${providerAddress} authorized successfully`);\n\n//     //     } catch(error) {\n//     //         console.error(\"Error adding records\", error);\n//     //     }\n\n//     // }\n\n//     const addRecord = async () => {\n//     try {\n//         // Ensure patientID is a valid number and not empty\n//         if (!patientID || isNaN(patientID)) {\n//             alert(\"Please enter a valid Patient ID.\");\n//             return;\n//         }\n\n//         const tx = await contract.addRecord(\n//             ethers.BigNumber.from(patientID), // Convert patientID to BigNumber\n//             \"Alice\", \n//             diagnosis, \n//             treatment\n//         );\n//         await tx.wait();\n//         fetchPatientRecords();\n//         alert(\"Record added successfully.\");\n\n//     } catch (error) {\n//         console.error(\"Error adding records\", error);\n//     }\n// };\n\n//     const authorizeProvider = async () => {\n//         if (isOwner){\n//             try {\n//                 const tx = await contract.authorizeProvider(providerAddress);\n//                 await tx.wait();\n//                 alert(`Provider ${providerAddress} authorized successfully`);\n\n//             } catch(error) {\n//                 console.error(\"Only contract owner can authorize different providers\");\n//             }\n//         } else {\n//             alert(\"Only contract owner can call this function\");\n//         }\n//     }\n\n//     return(\n//         <div className='container'>\n//             <h1 className = \"title\">HealthCare Application</h1>\n//             {account && <p className='account-info'>Connected Account: {account}</p>}\n//             {isOwner && <p className='owner-info'>You are the contract owner</p>}\n\n//         <div className='form-section'>\n//             <h2>Fetch Patient Records</h2>\n//             <input className='input-field' type='text' placeholder='Enter Patient ID' value={patientID} onChange={(e) => setPatientID(e.target.value)}/>\n//             <button className='action-button' onClick={fetchPatientRecords}>Fetch Records</button>\n//         </div>\n\n//         <div className=\"form-section\">\n//             <h2>Add Patient Record</h2>\n//             <input className='input-field' type='text' placeholder='Diagnosis' value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)}/>\n//             <input className='input-field' type='text' placeholder='Treatment' value={treatment} onChange={(e) => setTreatment(e.target.value)}/>\n//             <button className='action-button' onClick={addRecord}>Add Records</button>\n\n//         </div>\n//         <div className=\"form-section\">\n//             <h2>Authorize HealthCare Provider</h2>\n//             <input className='input-field' type= \"text\" placeholder='Provider Address' value = {providerAddress} onChange={(e) => setProviderAddress(e.target.value)}/>\n//             <button className='action-button' onClick={authorizeProvider}>Authorize Provider</button>\n//         </div>\n\n//         <div className='records-section'>\n//             <h2>Patient Records</h2>\n//             {patientRecords.map((record, index) => (\n//                 <div key = {index}>\n//                     <p>Record ID: {record.recordID.toNumber()}</p>\n//                     <p>Diagnosis: {record.diagnosis}</p>\n//                     <p>Treatment: {record.treatment}</p>\n//                     <p>Timestamp: {new Date(record.timestamp.toNumber() * 1000).toLocaleString()}</p>\n//             </div>\n//             ))}\n//         </div>\n\n//         </div>\n\n//     )\n\n// }\n\n// export default Healthcare;\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Healthcare = () => {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isOwner, setIsOwner] = useState(false);\n  const [patientID, setPatientID] = useState('');\n  const [diagnosis, setDiagnosis] = useState('');\n  const [treatment, setTreatment] = useState('');\n  const [patientRecords, setPatientRecords] = useState([]);\n  const [providerAddress, setProviderAddress] = useState('');\n  const contractAddress = \"0xD7ACd2a9FD159E69Bb102A1ca21C9a3e3A5F771B\";\n  const contractABI = [\n    // ... (your contract ABI here) ...\n  ];\n  useEffect(() => {\n    const connectWallet = async () => {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          await provider.send('eth_requestAccounts', []);\n          const signer = provider.getSigner();\n          setProvider(provider);\n          setSigner(signer);\n          const accountAddress = await signer.getAddress();\n          setAccount(accountAddress);\n          const contract = new ethers.Contract(contractAddress, contractABI, signer);\n          setContract(contract);\n          const ownerAddress = await contract.getOwner();\n          setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\n        } catch (error) {\n          console.error(\"Error connecting to wallet: \", error);\n        }\n      } else {\n        alert('Please install MetaMask or another Ethereum wallet extension to connect.');\n      }\n    };\n    connectWallet();\n  }, []);\n  const fetchPatientRecords = async () => {\n    try {\n      const records = await contract.getPatientRecords(ethers.BigNumber.from(patientID));\n      setPatientRecords(records);\n    } catch (error) {\n      console.error(\"Error fetching patient records\", error);\n    }\n  };\n  const addRecord = async () => {\n    try {\n      if (!patientID || isNaN(patientID)) {\n        alert(\"Please enter a valid Patient ID.\");\n        return;\n      }\n      const tx = await contract.addRecord(ethers.BigNumber.from(patientID), \"Alice\", diagnosis, treatment);\n      await tx.wait();\n      fetchPatientRecords();\n      alert(\"Record added successfully.\");\n    } catch (error) {\n      console.error(\"Error adding records\", error);\n    }\n  };\n  const authorizeProvider = async () => {\n    if (isOwner) {\n      try {\n        const tx = await contract.authorizeProvider(providerAddress);\n        await tx.wait();\n        alert(`Provider ${providerAddress} authorized successfully`);\n      } catch (error) {\n        console.error(\"Error authorizing provider\", error);\n      }\n    } else {\n      alert(\"Only the contract owner can authorize providers.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Healthcare Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 13\n    }, this), account && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"account-info\",\n      children: [\"Connected Account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 25\n    }, this), isOwner && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"owner-info\",\n      children: \"You are the contract owner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Fetch Patient Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Enter Patient ID\",\n        value: patientID,\n        onChange: e => setPatientID(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: fetchPatientRecords,\n        children: \"Fetch Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Patient Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Diagnosis\",\n        value: diagnosis,\n        onChange: e => setDiagnosis(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Treatment\",\n        value: treatment,\n        onChange: e => setTreatment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: addRecord,\n        children: \"Add Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Authorize Healthcare Provider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Provider Address\",\n        value: providerAddress,\n        onChange: e => setProviderAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: authorizeProvider,\n        children: \"Authorize Provider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"records-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Patient Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 17\n      }, this), patientRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Record ID: \", record.recordID.toNumber()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Diagnosis: \", record.diagnosis]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Treatment: \", record.treatment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Timestamp: \", new Date(record.timestamp.toNumber() * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 401,\n    columnNumber: 9\n  }, this);\n};\n_s(Healthcare, \"JF8BBgb+ZKa9s4g1+7VirZY7MHs=\");\n_c = Healthcare;\nexport default Healthcare;\nvar _c;\n$RefreshReg$(_c, \"Healthcare\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","Healthcare","_s","provider","setProvider","signer","setSigner","contract","setContract","account","setAccount","isOwner","setIsOwner","patientID","setPatientID","diagnosis","setDiagnosis","treatment","setTreatment","patientRecords","setPatientRecords","providerAddress","setProviderAddress","contractAddress","contractABI","connectWallet","window","ethereum","providers","Web3Provider","send","getSigner","accountAddress","getAddress","Contract","ownerAddress","getOwner","toLowerCase","error","console","alert","fetchPatientRecords","records","getPatientRecords","BigNumber","from","addRecord","isNaN","tx","wait","authorizeProvider","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","record","index","recordID","toNumber","Date","timestamp","toLocaleString","_c","$RefreshReg$"],"sources":["/Users/DT/Projects/Blockchain-Healthcare/src/Healthcare.js"],"sourcesContent":["// import React, {useState, useEffect} from 'react';\r\n// import {ethers} from 'ethers';\r\n\r\n// const Healthcare = () => {\r\n//     const [provider, setProvider] = useState(null);\r\n//     const [signer, setSigner] = useState(null);\r\n//     const [contract, setContract] = useState(null);\r\n//     const [account, setAccount] = useState(null);\r\n//     const [isOwner, setIsOwner] = useState(null);\r\n//     const [patientID, setPatientID] = useState('');\r\n//     const [diagnosis, setDiagnosis] = useState('');\r\n//     const [treatment, setTreatment] = useState('');\r\n//     const [patientRecords, setPatientRecords] = useState([]);\r\n\r\n\r\n//     const [providerAddress, setProviderAddress] = useState(\"\");\r\n//     const contractAddress = \"0xD7ACd2a9FD159E69Bb102A1ca21C9a3e3A5F771B\";\r\n\r\n//     const contractABI = [\r\n// \t{\r\n// \t\t\"inputs\": [\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"uint256\",\r\n// \t\t\t\t\"name\": \"patientID\",\r\n// \t\t\t\t\"type\": \"uint256\"\r\n// \t\t\t},\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"string\",\r\n// \t\t\t\t\"name\": \"patientName\",\r\n// \t\t\t\t\"type\": \"string\"\r\n// \t\t\t},\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"string\",\r\n// \t\t\t\t\"name\": \"diagnosis\",\r\n// \t\t\t\t\"type\": \"string\"\r\n// \t\t\t},\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"string\",\r\n// \t\t\t\t\"name\": \"treatment\",\r\n// \t\t\t\t\"type\": \"string\"\r\n// \t\t\t}\r\n// \t\t],\r\n// \t\t\"name\": \"addRecord\",\r\n// \t\t\"outputs\": [],\r\n// \t\t\"stateMutability\": \"nonpayable\",\r\n// \t\t\"type\": \"function\"\r\n// \t},\r\n// \t{\r\n// \t\t\"inputs\": [\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"address\",\r\n// \t\t\t\t\"name\": \"provider\",\r\n// \t\t\t\t\"type\": \"address\"\r\n// \t\t\t}\r\n// \t\t],\r\n// \t\t\"name\": \"authorizeProvider\",\r\n// \t\t\"outputs\": [],\r\n// \t\t\"stateMutability\": \"nonpayable\",\r\n// \t\t\"type\": \"function\"\r\n// \t},\r\n// \t{\r\n// \t\t\"inputs\": [],\r\n// \t\t\"stateMutability\": \"nonpayable\",\r\n// \t\t\"type\": \"constructor\"\r\n// \t},\r\n// \t{\r\n// \t\t\"inputs\": [],\r\n// \t\t\"name\": \"getOwner\",\r\n// \t\t\"outputs\": [\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"address\",\r\n// \t\t\t\t\"name\": \"\",\r\n// \t\t\t\t\"type\": \"address\"\r\n// \t\t\t}\r\n// \t\t],\r\n// \t\t\"stateMutability\": \"view\",\r\n// \t\t\"type\": \"function\"\r\n// \t},\r\n// \t{\r\n// \t\t\"inputs\": [\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"uint256\",\r\n// \t\t\t\t\"name\": \"patientID\",\r\n// \t\t\t\t\"type\": \"uint256\"\r\n// \t\t\t}\r\n// \t\t],\r\n// \t\t\"name\": \"getPatientRecords\",\r\n// \t\t\"outputs\": [\r\n// \t\t\t{\r\n// \t\t\t\t\"components\": [\r\n// \t\t\t\t\t{\r\n// \t\t\t\t\t\t\"internalType\": \"uint256\",\r\n// \t\t\t\t\t\t\"name\": \"recordID\",\r\n// \t\t\t\t\t\t\"type\": \"uint256\"\r\n// \t\t\t\t\t},\r\n// \t\t\t\t\t{\r\n// \t\t\t\t\t\t\"internalType\": \"string\",\r\n// \t\t\t\t\t\t\"name\": \"patientName\",\r\n// \t\t\t\t\t\t\"type\": \"string\"\r\n// \t\t\t\t\t},\r\n// \t\t\t\t\t{\r\n// \t\t\t\t\t\t\"internalType\": \"string\",\r\n// \t\t\t\t\t\t\"name\": \"diagnosis\",\r\n// \t\t\t\t\t\t\"type\": \"string\"\r\n// \t\t\t\t\t},\r\n// \t\t\t\t\t{\r\n// \t\t\t\t\t\t\"internalType\": \"string\",\r\n// \t\t\t\t\t\t\"name\": \"treatment\",\r\n// \t\t\t\t\t\t\"type\": \"string\"\r\n// \t\t\t\t\t},\r\n// \t\t\t\t\t{\r\n// \t\t\t\t\t\t\"internalType\": \"uint256\",\r\n// \t\t\t\t\t\t\"name\": \"timestamp\",\r\n// \t\t\t\t\t\t\"type\": \"uint256\"\r\n// \t\t\t\t\t}\r\n// \t\t\t\t],\r\n// \t\t\t\t\"internalType\": \"struct HealthcareRecords.Record[]\",\r\n// \t\t\t\t\"name\": \"\",\r\n// \t\t\t\t\"type\": \"tuple[]\"\r\n// \t\t\t}\r\n// \t\t],\r\n// \t\t\"stateMutability\": \"view\",\r\n// \t\t\"type\": \"function\"\r\n// \t}\r\n// ];\r\n\r\n//     // useEffect(() => {\r\n//     //     const connectWallet = async () => {\r\n//     //         try {\r\n//     //             const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n//     //             await provider.send('eth_requestAccounts', []);\r\n//     //             const signer = provider.getSigner();\r\n//     //             setProvider(provider);\r\n//     //             setSigner(signer);\r\n\r\n//     //             const accountAddress = await signer.getAddress();\r\n//     //             setAccount(accountAddress);\r\n\r\n//     //             console.log(accountAddress);\r\n\r\n//     //             const contract = new ethers.Contract(contractAddress, contractABI, signer);\r\n//     //             setContract(contract);\r\n\r\n//     //             const ownerAddress = await contract.getOwner();\r\n\r\n//     //             setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\r\n\r\n               \r\n\r\n//     //         } catch (error) {\r\n//     //             console.error(\"Error connecting to wallet: \", error);\r\n//     //         }\r\n\r\n//     //     };\r\n//     //     connectWallet();\r\n\r\n//     // }, []);\r\n\r\n\r\n//     useEffect(() => {\r\n//     const connectWallet = async () => {\r\n//         try {\r\n//             if (typeof window.ethereum !== 'undefined') {\r\n//                 const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n//                 await provider.send('eth_requestAccounts', []);\r\n//                 const signer = provider.getSigner();\r\n//                 setProvider(provider);\r\n//                 setSigner(signer);\r\n\r\n//                 const accountAddress = await signer.getAddress();\r\n//                 setAccount(accountAddress);\r\n\r\n//                 console.log(accountAddress);\r\n\r\n//                 const contract = new ethers.Contract(contractAddress, contractABI, signer);\r\n//                 setContract(contract);\r\n\r\n//                 const ownerAddress = await contract.getOwner();\r\n//                 setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\r\n\r\n//             } else {\r\n//                 alert('Please install MetaMask or another Ethereum wallet extension to connect.');\r\n//             }\r\n\r\n//         } catch (error) {\r\n//             console.error(\"Error connecting to wallet: \", error);\r\n//         }\r\n//     };\r\n//     connectWallet();\r\n// }, []);\r\n\r\n\r\n\r\n//     const fetchPatientRecords = async () => {\r\n//         try {\r\n//             const records = await contract.getPatientRecords(patientID);\r\n//             console.log(records);\r\n//             setPatientRecords(records);\r\n\r\n//         } catch(error) {\r\n//             console.error(\"Error fetching patient records\", error);\r\n//         }\r\n//     }\r\n\r\n//     // const addRecord = async () => {\r\n//     //     try {\r\n//     //         const tx = await contract.addRecord(patientID, \"Alice\", diagnosis, treatment);\r\n//     //         await tx.wait();\r\n//     //         fetchPatientRecords();\r\n//     //         await tx.wait();\r\n//     //         alert(`Provider ${providerAddress} authorized successfully`);\r\n\r\n//     //     } catch(error) {\r\n//     //         console.error(\"Error adding records\", error);\r\n//     //     }\r\n\r\n//     // }\r\n\r\n//     const addRecord = async () => {\r\n//     try {\r\n//         // Ensure patientID is a valid number and not empty\r\n//         if (!patientID || isNaN(patientID)) {\r\n//             alert(\"Please enter a valid Patient ID.\");\r\n//             return;\r\n//         }\r\n\r\n//         const tx = await contract.addRecord(\r\n//             ethers.BigNumber.from(patientID), // Convert patientID to BigNumber\r\n//             \"Alice\", \r\n//             diagnosis, \r\n//             treatment\r\n//         );\r\n//         await tx.wait();\r\n//         fetchPatientRecords();\r\n//         alert(\"Record added successfully.\");\r\n\r\n//     } catch (error) {\r\n//         console.error(\"Error adding records\", error);\r\n//     }\r\n// };\r\n\r\n\r\n\r\n//     const authorizeProvider = async () => {\r\n//         if (isOwner){\r\n//             try {\r\n//                 const tx = await contract.authorizeProvider(providerAddress);\r\n//                 await tx.wait();\r\n//                 alert(`Provider ${providerAddress} authorized successfully`);\r\n\r\n//             } catch(error) {\r\n//                 console.error(\"Only contract owner can authorize different providers\");\r\n//             }\r\n//         } else {\r\n//             alert(\"Only contract owner can call this function\");\r\n//         }\r\n//     }\r\n\r\n//     return(\r\n//         <div className='container'>\r\n//             <h1 className = \"title\">HealthCare Application</h1>\r\n//             {account && <p className='account-info'>Connected Account: {account}</p>}\r\n//             {isOwner && <p className='owner-info'>You are the contract owner</p>}\r\n\r\n//         <div className='form-section'>\r\n//             <h2>Fetch Patient Records</h2>\r\n//             <input className='input-field' type='text' placeholder='Enter Patient ID' value={patientID} onChange={(e) => setPatientID(e.target.value)}/>\r\n//             <button className='action-button' onClick={fetchPatientRecords}>Fetch Records</button>\r\n//         </div>\r\n\r\n//         <div className=\"form-section\">\r\n//             <h2>Add Patient Record</h2>\r\n//             <input className='input-field' type='text' placeholder='Diagnosis' value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)}/>\r\n//             <input className='input-field' type='text' placeholder='Treatment' value={treatment} onChange={(e) => setTreatment(e.target.value)}/>\r\n//             <button className='action-button' onClick={addRecord}>Add Records</button>\r\n\r\n//         </div>\r\n//         <div className=\"form-section\">\r\n//             <h2>Authorize HealthCare Provider</h2>\r\n//             <input className='input-field' type= \"text\" placeholder='Provider Address' value = {providerAddress} onChange={(e) => setProviderAddress(e.target.value)}/>\r\n//             <button className='action-button' onClick={authorizeProvider}>Authorize Provider</button>\r\n//         </div>\r\n\r\n//         <div className='records-section'>\r\n//             <h2>Patient Records</h2>\r\n//             {patientRecords.map((record, index) => (\r\n//                 <div key = {index}>\r\n//                     <p>Record ID: {record.recordID.toNumber()}</p>\r\n//                     <p>Diagnosis: {record.diagnosis}</p>\r\n//                     <p>Treatment: {record.treatment}</p>\r\n//                     <p>Timestamp: {new Date(record.timestamp.toNumber() * 1000).toLocaleString()}</p>\r\n//             </div>\r\n//             ))}\r\n//         </div>\r\n\r\n//         </div>\r\n\r\n//     )\r\n\r\n// }\r\n\r\n// export default Healthcare;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\n\r\nconst Healthcare = () => {\r\n    const [provider, setProvider] = useState(null);\r\n    const [signer, setSigner] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n    const [account, setAccount] = useState(null);\r\n    const [isOwner, setIsOwner] = useState(false);\r\n    const [patientID, setPatientID] = useState('');\r\n    const [diagnosis, setDiagnosis] = useState('');\r\n    const [treatment, setTreatment] = useState('');\r\n    const [patientRecords, setPatientRecords] = useState([]);\r\n    const [providerAddress, setProviderAddress] = useState('');\r\n    \r\n    const contractAddress = \"0xD7ACd2a9FD159E69Bb102A1ca21C9a3e3A5F771B\";\r\n    const contractABI = [\r\n        // ... (your contract ABI here) ...\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const connectWallet = async () => {\r\n            if (typeof window.ethereum !== 'undefined') {\r\n                try {\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    await provider.send('eth_requestAccounts', []);\r\n                    const signer = provider.getSigner();\r\n                    setProvider(provider);\r\n                    setSigner(signer);\r\n\r\n                    const accountAddress = await signer.getAddress();\r\n                    setAccount(accountAddress);\r\n\r\n                    const contract = new ethers.Contract(contractAddress, contractABI, signer);\r\n                    setContract(contract);\r\n\r\n                    const ownerAddress = await contract.getOwner();\r\n                    setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\r\n\r\n                } catch (error) {\r\n                    console.error(\"Error connecting to wallet: \", error);\r\n                }\r\n            } else {\r\n                alert('Please install MetaMask or another Ethereum wallet extension to connect.');\r\n            }\r\n        };\r\n        connectWallet();\r\n    }, []);\r\n\r\n    const fetchPatientRecords = async () => {\r\n        try {\r\n            const records = await contract.getPatientRecords(ethers.BigNumber.from(patientID));\r\n            setPatientRecords(records);\r\n        } catch (error) {\r\n            console.error(\"Error fetching patient records\", error);\r\n        }\r\n    };\r\n\r\n    const addRecord = async () => {\r\n        try {\r\n            if (!patientID || isNaN(patientID)) {\r\n                alert(\"Please enter a valid Patient ID.\");\r\n                return;\r\n            }\r\n\r\n            const tx = await contract.addRecord(\r\n                ethers.BigNumber.from(patientID),\r\n                \"Alice\",\r\n                diagnosis,\r\n                treatment\r\n            );\r\n            await tx.wait();\r\n            fetchPatientRecords();\r\n            alert(\"Record added successfully.\");\r\n\r\n        } catch (error) {\r\n            console.error(\"Error adding records\", error);\r\n        }\r\n    };\r\n\r\n    const authorizeProvider = async () => {\r\n        if (isOwner) {\r\n            try {\r\n                const tx = await contract.authorizeProvider(providerAddress);\r\n                await tx.wait();\r\n                alert(`Provider ${providerAddress} authorized successfully`);\r\n            } catch (error) {\r\n                console.error(\"Error authorizing provider\", error);\r\n            }\r\n        } else {\r\n            alert(\"Only the contract owner can authorize providers.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='container'>\r\n            <h1 className=\"title\">Healthcare Application</h1>\r\n            {account && <p className='account-info'>Connected Account: {account}</p>}\r\n            {isOwner && <p className='owner-info'>You are the contract owner</p>}\r\n\r\n            <div className='form-section'>\r\n                <h2>Fetch Patient Records</h2>\r\n                <input className='input-field' type='text' placeholder='Enter Patient ID' value={patientID} onChange={(e) => setPatientID(e.target.value)} />\r\n                <button className='action-button' onClick={fetchPatientRecords}>Fetch Records</button>\r\n            </div>\r\n\r\n            <div className=\"form-section\">\r\n                <h2>Add Patient Record</h2>\r\n                <input className='input-field' type='text' placeholder='Diagnosis' value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} />\r\n                <input className='input-field' type='text' placeholder='Treatment' value={treatment} onChange={(e) => setTreatment(e.target.value)} />\r\n                <button className='action-button' onClick={addRecord}>Add Record</button>\r\n            </div>\r\n\r\n            <div className=\"form-section\">\r\n                <h2>Authorize Healthcare Provider</h2>\r\n                <input className='input-field' type=\"text\" placeholder='Provider Address' value={providerAddress} onChange={(e) => setProviderAddress(e.target.value)} />\r\n                <button className='action-button' onClick={authorizeProvider}>Authorize Provider</button>\r\n            </div>\r\n\r\n            <div className='records-section'>\r\n                <h2>Patient Records</h2>\r\n                {patientRecords.map((record, index) => (\r\n                    <div key={index}>\r\n                        <p>Record ID: {record.recordID.toNumber()}</p>\r\n                        <p>Diagnosis: {record.diagnosis}</p>\r\n                        <p>Treatment: {record.treatment}</p>\r\n                        <p>Timestamp: {new Date(record.timestamp.toNumber() * 1000).toLocaleString()}</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Healthcare;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}