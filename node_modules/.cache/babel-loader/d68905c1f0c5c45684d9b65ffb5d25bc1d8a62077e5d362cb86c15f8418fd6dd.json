{"ast":null,"code":"var _jsxFileName = \"/Users/DT/Projects/Blockchain-Healthcare/src/Healthcare.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Healthcare = () => {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isOwner, setIsOwner] = useState(null);\n  const [patientID, setPatientID] = useState('');\n  const [diagnosis, setDiagnosis] = useState('');\n  const [treatment, setTreatment] = useState('');\n  const [patientRecords, setPatientRecords] = useState([]);\n  const [providerAddress, setProviderAddress] = useState(\"0x445d7D7dB052e203b51a9c6520DcD41A07aA1991\");\n  const contractAddress = \"0xD7ACd2a9FD159E69Bb102A1ca21C9a3e3A5F771B\";\n  const contractABI = [{\n    \"inputs\": [{\n      \"internalType\": \"uint256\",\n      \"name\": \"patientID\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"string\",\n      \"name\": \"patientName\",\n      \"type\": \"string\"\n    }, {\n      \"internalType\": \"string\",\n      \"name\": \"diagnosis\",\n      \"type\": \"string\"\n    }, {\n      \"internalType\": \"string\",\n      \"name\": \"treatment\",\n      \"type\": \"string\"\n    }],\n    \"name\": \"addRecord\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }, {\n    \"inputs\": [{\n      \"internalType\": \"address\",\n      \"name\": \"provider\",\n      \"type\": \"address\"\n    }],\n    \"name\": \"authorizeProvider\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }, {\n    \"inputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  }, {\n    \"inputs\": [],\n    \"name\": \"getOwner\",\n    \"outputs\": [{\n      \"internalType\": \"address\",\n      \"name\": \"\",\n      \"type\": \"address\"\n    }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }, {\n    \"inputs\": [{\n      \"internalType\": \"uint256\",\n      \"name\": \"patientID\",\n      \"type\": \"uint256\"\n    }],\n    \"name\": \"getPatientRecords\",\n    \"outputs\": [{\n      \"components\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"recordID\",\n        \"type\": \"uint256\"\n      }, {\n        \"internalType\": \"string\",\n        \"name\": \"patientName\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"string\",\n        \"name\": \"diagnosis\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"string\",\n        \"name\": \"treatment\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"uint256\",\n        \"name\": \"timestamp\",\n        \"type\": \"uint256\"\n      }],\n      \"internalType\": \"struct HealthcareRecords.Record[]\",\n      \"name\": \"\",\n      \"type\": \"tuple[]\"\n    }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }];\n\n  // useEffect(() => {\n  //     const connectWallet = async () => {\n  //         try {\n  //             const provider = new ethers.providers.Web3Provider(window.ethereum);\n  //             await provider.send('eth_requestAccounts', []);\n  //             const signer = provider.getSigner();\n  //             setProvider(provider);\n  //             setSigner(signer);\n\n  //             const accountAddress = await signer.getAddress();\n  //             setAccount(accountAddress);\n\n  //             console.log(accountAddress);\n\n  //             const contract = new ethers.Contract(contractAddress, contractABI, signer);\n  //             setContract(contract);\n\n  //             const ownerAddress = await contract.getOwner();\n\n  //             setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\n\n  //         } catch (error) {\n  //             console.error(\"Error connecting to wallet: \", error);\n  //         }\n\n  //     };\n  //     connectWallet();\n\n  // }, []);\n\n  useEffect(() => {\n    const connectWallet = async () => {\n      try {\n        if (typeof window.ethereum !== 'undefined') {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          await provider.send('eth_requestAccounts', []);\n          const signer = provider.getSigner();\n          setProvider(provider);\n          setSigner(signer);\n          const accountAddress = await signer.getAddress();\n          setAccount(accountAddress);\n          console.log(accountAddress);\n          const contract = new ethers.Contract(contractAddress, contractABI, signer);\n          setContract(contract);\n          const ownerAddress = await contract.getOwner();\n          setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\n        } else {\n          alert('Please install MetaMask or another Ethereum wallet extension to connect.');\n        }\n      } catch (error) {\n        console.error(\"Error connecting to wallet: \", error);\n      }\n    };\n    connectWallet();\n  }, []);\n  const fetchPatientRecords = async () => {\n    try {\n      const records = await contract.getPatientRecords(patientID);\n      console.log(records);\n      setPatientRecords(records);\n    } catch (error) {\n      console.error(\"Error fetching patient records\", error);\n    }\n  };\n\n  // const addRecord = async () => {\n  //     try {\n  //         const tx = await contract.addRecord(patientID, \"Alice\", diagnosis, treatment);\n  //         await tx.wait();\n  //         fetchPatientRecords();\n  //         await tx.wait();\n  //         alert(`Provider ${providerAddress} authorized successfully`);\n\n  //     } catch(error) {\n  //         console.error(\"Error adding records\", error);\n  //     }\n\n  // }\n\n  const addRecord = async () => {\n    try {\n      // Ensure patientID is a valid number and not empty\n      if (!patientID || isNaN(patientID)) {\n        alert(\"Please enter a valid Patient ID.\");\n        return;\n      }\n      const tx = await contract.addRecord(ethers.BigNumber.from(patientID),\n      // Convert patientID to BigNumber\n      \"Alice\", diagnosis, treatment);\n      await tx.wait();\n      fetchPatientRecords();\n      alert(\"Record added successfully.\");\n    } catch (error) {\n      console.error(\"Error adding records\", error);\n    }\n  };\n  const authorizeProvider = async () => {\n    if (isOwner) {\n      try {\n        const tx = await contract.authorizeProvider(providerAddress);\n        await tx.wait();\n        alert(`Provider ${providerAddress} authorized successfully`);\n      } catch (error) {\n        console.error(\"Only contract owner can authorize different providers\");\n      }\n    } else {\n      alert(\"Only contract owner can call this function\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"HealthCare Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this), account && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"account-info\",\n      children: [\"Connected Account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 25\n    }, this), isOwner && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"owner-info\",\n      children: \"You are the contract owner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Fetch Patient Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Enter Patient ID\",\n        value: patientID,\n        onChange: e => setPatientID(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: fetchPatientRecords,\n        children: \"Fetch Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Patient Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Diagnosis\",\n        value: diagnosis,\n        onChange: e => setDiagnosis(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Treatment\",\n        value: treatment,\n        onChange: e => setTreatment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: addRecord,\n        children: \"Add Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Authorize HealthCare Provider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Provider Address\",\n        value: providerAddress,\n        onChange: e => setProviderAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: authorizeProvider,\n        children: \"Authorize Provider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"records-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Patient Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 13\n      }, this), patientRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Record ID: \", record.recordID.toNumber()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Diagnosis: \", record.diagnosis]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Treatment: \", record.treatment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Timestamp: \", new Date(record.timestamp.toNumber() * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 9\n  }, this);\n};\n_s(Healthcare, \"ZI/pwNjS0JQyMa1PMRH6XWRpaSI=\");\n_c = Healthcare;\nexport default Healthcare;\nvar _c;\n$RefreshReg$(_c, \"Healthcare\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","Healthcare","_s","provider","setProvider","signer","setSigner","contract","setContract","account","setAccount","isOwner","setIsOwner","patientID","setPatientID","diagnosis","setDiagnosis","treatment","setTreatment","patientRecords","setPatientRecords","providerAddress","setProviderAddress","contractAddress","contractABI","connectWallet","window","ethereum","providers","Web3Provider","send","getSigner","accountAddress","getAddress","console","log","Contract","ownerAddress","getOwner","toLowerCase","alert","error","fetchPatientRecords","records","getPatientRecords","addRecord","isNaN","tx","BigNumber","from","wait","authorizeProvider","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","record","index","recordID","toNumber","Date","timestamp","toLocaleString","_c","$RefreshReg$"],"sources":["/Users/DT/Projects/Blockchain-Healthcare/src/Healthcare.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {ethers} from 'ethers';\r\n\r\nconst Healthcare = () => {\r\n    const [provider, setProvider] = useState(null);\r\n    const [signer, setSigner] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n    const [account, setAccount] = useState(null);\r\n    const [isOwner, setIsOwner] = useState(null);\r\n    const [patientID, setPatientID] = useState('');\r\n    const [diagnosis, setDiagnosis] = useState('');\r\n    const [treatment, setTreatment] = useState('');\r\n    const [patientRecords, setPatientRecords] = useState([]);\r\n\r\n\r\n    const [providerAddress, setProviderAddress] = useState(\"0x445d7D7dB052e203b51a9c6520DcD41A07aA1991\");\r\n    const contractAddress = \"0xD7ACd2a9FD159E69Bb102A1ca21C9a3e3A5F771B\";\r\n\r\n    const contractABI = [\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"patientID\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"patientName\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"diagnosis\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"treatment\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"addRecord\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"provider\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"authorizeProvider\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"constructor\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"getOwner\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"patientID\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getPatientRecords\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"recordID\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"patientName\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"diagnosis\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"treatment\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"timestamp\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct HealthcareRecords.Record[]\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n];\r\n\r\n    // useEffect(() => {\r\n    //     const connectWallet = async () => {\r\n    //         try {\r\n    //             const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    //             await provider.send('eth_requestAccounts', []);\r\n    //             const signer = provider.getSigner();\r\n    //             setProvider(provider);\r\n    //             setSigner(signer);\r\n\r\n    //             const accountAddress = await signer.getAddress();\r\n    //             setAccount(accountAddress);\r\n\r\n    //             console.log(accountAddress);\r\n\r\n    //             const contract = new ethers.Contract(contractAddress, contractABI, signer);\r\n    //             setContract(contract);\r\n\r\n    //             const ownerAddress = await contract.getOwner();\r\n\r\n    //             setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\r\n\r\n               \r\n\r\n    //         } catch (error) {\r\n    //             console.error(\"Error connecting to wallet: \", error);\r\n    //         }\r\n\r\n    //     };\r\n    //     connectWallet();\r\n\r\n    // }, []);\r\n\r\n\r\n    useEffect(() => {\r\n    const connectWallet = async () => {\r\n        try {\r\n            if (typeof window.ethereum !== 'undefined') {\r\n                const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                await provider.send('eth_requestAccounts', []);\r\n                const signer = provider.getSigner();\r\n                setProvider(provider);\r\n                setSigner(signer);\r\n\r\n                const accountAddress = await signer.getAddress();\r\n                setAccount(accountAddress);\r\n\r\n                console.log(accountAddress);\r\n\r\n                const contract = new ethers.Contract(contractAddress, contractABI, signer);\r\n                setContract(contract);\r\n\r\n                const ownerAddress = await contract.getOwner();\r\n                setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\r\n\r\n            } else {\r\n                alert('Please install MetaMask or another Ethereum wallet extension to connect.');\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(\"Error connecting to wallet: \", error);\r\n        }\r\n    };\r\n    connectWallet();\r\n}, []);\r\n\r\n\r\n\r\n    const fetchPatientRecords = async () => {\r\n        try {\r\n            const records = await contract.getPatientRecords(patientID);\r\n            console.log(records);\r\n            setPatientRecords(records);\r\n\r\n        } catch(error) {\r\n            console.error(\"Error fetching patient records\", error);\r\n        }\r\n    }\r\n\r\n    // const addRecord = async () => {\r\n    //     try {\r\n    //         const tx = await contract.addRecord(patientID, \"Alice\", diagnosis, treatment);\r\n    //         await tx.wait();\r\n    //         fetchPatientRecords();\r\n    //         await tx.wait();\r\n    //         alert(`Provider ${providerAddress} authorized successfully`);\r\n\r\n    //     } catch(error) {\r\n    //         console.error(\"Error adding records\", error);\r\n    //     }\r\n\r\n    // }\r\n\r\n    const addRecord = async () => {\r\n    try {\r\n        // Ensure patientID is a valid number and not empty\r\n        if (!patientID || isNaN(patientID)) {\r\n            alert(\"Please enter a valid Patient ID.\");\r\n            return;\r\n        }\r\n\r\n        const tx = await contract.addRecord(\r\n            ethers.BigNumber.from(patientID), // Convert patientID to BigNumber\r\n            \"Alice\", \r\n            diagnosis, \r\n            treatment\r\n        );\r\n        await tx.wait();\r\n        fetchPatientRecords();\r\n        alert(\"Record added successfully.\");\r\n\r\n    } catch (error) {\r\n        console.error(\"Error adding records\", error);\r\n    }\r\n};\r\n\r\n\r\n\r\n    const authorizeProvider = async () => {\r\n        if (isOwner){\r\n            try {\r\n                const tx = await contract.authorizeProvider(providerAddress);\r\n                await tx.wait();\r\n                alert(`Provider ${providerAddress} authorized successfully`);\r\n\r\n            } catch(error) {\r\n                console.error(\"Only contract owner can authorize different providers\");\r\n            }\r\n        } else {\r\n            alert(\"Only contract owner can call this function\");\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className='container'>\r\n            <h1 className = \"title\">HealthCare Application</h1>\r\n            {account && <p className='account-info'>Connected Account: {account}</p>}\r\n            {isOwner && <p className='owner-info'>You are the contract owner</p>}\r\n\r\n        <div className='form-section'>\r\n            <h2>Fetch Patient Records</h2>\r\n            <input className='input-field' type='text' placeholder='Enter Patient ID' value={patientID} onChange={(e) => setPatientID(e.target.value)}/>\r\n            <button className='action-button' onClick={fetchPatientRecords}>Fetch Records</button>\r\n        </div>\r\n\r\n        <div className=\"form-section\">\r\n            <h2>Add Patient Record</h2>\r\n            <input className='input-field' type='text' placeholder='Diagnosis' value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)}/>\r\n            <input className='input-field' type='text' placeholder='Treatment' value={treatment} onChange={(e) => setTreatment(e.target.value)}/>\r\n            <button className='action-button' onClick={addRecord}>Add Records</button>\r\n\r\n        </div>\r\n        <div className=\"form-section\">\r\n            <h2>Authorize HealthCare Provider</h2>\r\n            <input className='input-field' type= \"text\" placeholder='Provider Address' value = {providerAddress} onChange={(e) => setProviderAddress(e.target.value)}/>\r\n            <button className='action-button' onClick={authorizeProvider}>Authorize Provider</button>\r\n        </div>\r\n\r\n        <div className='records-section'>\r\n            <h2>Patient Records</h2>\r\n            {patientRecords.map((record, index) => (\r\n                <div key = {index}>\r\n                    <p>Record ID: {record.recordID.toNumber()}</p>\r\n                    <p>Diagnosis: {record.diagnosis}</p>\r\n                    <p>Treatment: {record.treatment}</p>\r\n                    <p>Timestamp: {new Date(record.timestamp.toNumber() * 1000).toLocaleString()}</p>\r\n            </div>\r\n            ))}\r\n        </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Healthcare;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}