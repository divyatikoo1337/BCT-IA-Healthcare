{"ast":null,"code":"var _jsxFileName = \"/Users/DT/Projects/Blockchain-Healthcare/src/Healthcare.js\",\n  _s = $RefreshSig$();\n// import React, {useState, useEffect} from 'react';\n// import {ethers} from 'ethers';\n\n// const Healthcare = () => {\n//     const [provider, setProvider] = useState(null);\n//     const [signer, setSigner] = useState(null);\n//     const [contract, setContract] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [isOwner, setIsOwner] = useState(null);\n//     const [patientID, setPatientID] = useState('');\n//     const [diagnosis, setDiagnosis] = useState('');\n//     const [treatment, setTreatment] = useState('');\n//     const [patientRecords, setPatientRecords] = useState([]);\n\n//     const [providerAddress, setProviderAddress] = useState(\"\");\n//     const contractAddress = \"0xD7ACd2a9FD159E69Bb102A1ca21C9a3e3A5F771B\";\n\n//     const contractABI = [\n// \t{\n// \t\t\"inputs\": [\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"uint256\",\n// \t\t\t\t\"name\": \"patientID\",\n// \t\t\t\t\"type\": \"uint256\"\n// \t\t\t},\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"string\",\n// \t\t\t\t\"name\": \"patientName\",\n// \t\t\t\t\"type\": \"string\"\n// \t\t\t},\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"string\",\n// \t\t\t\t\"name\": \"diagnosis\",\n// \t\t\t\t\"type\": \"string\"\n// \t\t\t},\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"string\",\n// \t\t\t\t\"name\": \"treatment\",\n// \t\t\t\t\"type\": \"string\"\n// \t\t\t}\n// \t\t],\n// \t\t\"name\": \"addRecord\",\n// \t\t\"outputs\": [],\n// \t\t\"stateMutability\": \"nonpayable\",\n// \t\t\"type\": \"function\"\n// \t},\n// \t{\n// \t\t\"inputs\": [\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"address\",\n// \t\t\t\t\"name\": \"provider\",\n// \t\t\t\t\"type\": \"address\"\n// \t\t\t}\n// \t\t],\n// \t\t\"name\": \"authorizeProvider\",\n// \t\t\"outputs\": [],\n// \t\t\"stateMutability\": \"nonpayable\",\n// \t\t\"type\": \"function\"\n// \t},\n// \t{\n// \t\t\"inputs\": [],\n// \t\t\"stateMutability\": \"nonpayable\",\n// \t\t\"type\": \"constructor\"\n// \t},\n// \t{\n// \t\t\"inputs\": [],\n// \t\t\"name\": \"getOwner\",\n// \t\t\"outputs\": [\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"address\",\n// \t\t\t\t\"name\": \"\",\n// \t\t\t\t\"type\": \"address\"\n// \t\t\t}\n// \t\t],\n// \t\t\"stateMutability\": \"view\",\n// \t\t\"type\": \"function\"\n// \t},\n// \t{\n// \t\t\"inputs\": [\n// \t\t\t{\n// \t\t\t\t\"internalType\": \"uint256\",\n// \t\t\t\t\"name\": \"patientID\",\n// \t\t\t\t\"type\": \"uint256\"\n// \t\t\t}\n// \t\t],\n// \t\t\"name\": \"getPatientRecords\",\n// \t\t\"outputs\": [\n// \t\t\t{\n// \t\t\t\t\"components\": [\n// \t\t\t\t\t{\n// \t\t\t\t\t\t\"internalType\": \"uint256\",\n// \t\t\t\t\t\t\"name\": \"recordID\",\n// \t\t\t\t\t\t\"type\": \"uint256\"\n// \t\t\t\t\t},\n// \t\t\t\t\t{\n// \t\t\t\t\t\t\"internalType\": \"string\",\n// \t\t\t\t\t\t\"name\": \"patientName\",\n// \t\t\t\t\t\t\"type\": \"string\"\n// \t\t\t\t\t},\n// \t\t\t\t\t{\n// \t\t\t\t\t\t\"internalType\": \"string\",\n// \t\t\t\t\t\t\"name\": \"diagnosis\",\n// \t\t\t\t\t\t\"type\": \"string\"\n// \t\t\t\t\t},\n// \t\t\t\t\t{\n// \t\t\t\t\t\t\"internalType\": \"string\",\n// \t\t\t\t\t\t\"name\": \"treatment\",\n// \t\t\t\t\t\t\"type\": \"string\"\n// \t\t\t\t\t},\n// \t\t\t\t\t{\n// \t\t\t\t\t\t\"internalType\": \"uint256\",\n// \t\t\t\t\t\t\"name\": \"timestamp\",\n// \t\t\t\t\t\t\"type\": \"uint256\"\n// \t\t\t\t\t}\n// \t\t\t\t],\n// \t\t\t\t\"internalType\": \"struct HealthcareRecords.Record[]\",\n// \t\t\t\t\"name\": \"\",\n// \t\t\t\t\"type\": \"tuple[]\"\n// \t\t\t}\n// \t\t],\n// \t\t\"stateMutability\": \"view\",\n// \t\t\"type\": \"function\"\n// \t}\n// ];\n\n//     // useEffect(() => {\n//     //     const connectWallet = async () => {\n//     //         try {\n//     //             const provider = new ethers.providers.Web3Provider(window.ethereum);\n//     //             await provider.send('eth_requestAccounts', []);\n//     //             const signer = provider.getSigner();\n//     //             setProvider(provider);\n//     //             setSigner(signer);\n\n//     //             const accountAddress = await signer.getAddress();\n//     //             setAccount(accountAddress);\n\n//     //             console.log(accountAddress);\n\n//     //             const contract = new ethers.Contract(contractAddress, contractABI, signer);\n//     //             setContract(contract);\n\n//     //             const ownerAddress = await contract.getOwner();\n\n//     //             setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\n\n//     //         } catch (error) {\n//     //             console.error(\"Error connecting to wallet: \", error);\n//     //         }\n\n//     //     };\n//     //     connectWallet();\n\n//     // }, []);\n\n//     useEffect(() => {\n//     const connectWallet = async () => {\n//         try {\n//             if (typeof window.ethereum !== 'undefined') {\n//                 const provider = new ethers.providers.Web3Provider(window.ethereum);\n//                 await provider.send('eth_requestAccounts', []);\n//                 const signer = provider.getSigner();\n//                 setProvider(provider);\n//                 setSigner(signer);\n\n//                 const accountAddress = await signer.getAddress();\n//                 setAccount(accountAddress);\n\n//                 console.log(accountAddress);\n\n//                 const contract = new ethers.Contract(contractAddress, contractABI, signer);\n//                 setContract(contract);\n\n//                 const ownerAddress = await contract.getOwner();\n//                 setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\n\n//             } else {\n//                 alert('Please install MetaMask or another Ethereum wallet extension to connect.');\n//             }\n\n//         } catch (error) {\n//             console.error(\"Error connecting to wallet: \", error);\n//         }\n//     };\n//     connectWallet();\n// }, []);\n\n//     const fetchPatientRecords = async () => {\n//         try {\n//             const records = await contract.getPatientRecords(patientID);\n//             console.log(records);\n//             setPatientRecords(records);\n\n//         } catch(error) {\n//             console.error(\"Error fetching patient records\", error);\n//         }\n//     }\n\n//     // const addRecord = async () => {\n//     //     try {\n//     //         const tx = await contract.addRecord(patientID, \"Alice\", diagnosis, treatment);\n//     //         await tx.wait();\n//     //         fetchPatientRecords();\n//     //         await tx.wait();\n//     //         alert(`Provider ${providerAddress} authorized successfully`);\n\n//     //     } catch(error) {\n//     //         console.error(\"Error adding records\", error);\n//     //     }\n\n//     // }\n\n//     const addRecord = async () => {\n//     try {\n//         // Ensure patientID is a valid number and not empty\n//         if (!patientID || isNaN(patientID)) {\n//             alert(\"Please enter a valid Patient ID.\");\n//             return;\n//         }\n\n//         const tx = await contract.addRecord(\n//             ethers.BigNumber.from(patientID), // Convert patientID to BigNumber\n//             \"Alice\", \n//             diagnosis, \n//             treatment\n//         );\n//         await tx.wait();\n//         fetchPatientRecords();\n//         alert(\"Record added successfully.\");\n\n//     } catch (error) {\n//         console.error(\"Error adding records\", error);\n//     }\n// };\n\n//     const authorizeProvider = async () => {\n//         if (isOwner){\n//             try {\n//                 const tx = await contract.authorizeProvider(providerAddress);\n//                 await tx.wait();\n//                 alert(`Provider ${providerAddress} authorized successfully`);\n\n//             } catch(error) {\n//                 console.error(\"Only contract owner can authorize different providers\");\n//             }\n//         } else {\n//             alert(\"Only contract owner can call this function\");\n//         }\n//     }\n\n//     return(\n//         <div className='container'>\n//             <h1 className = \"title\">HealthCare Application</h1>\n//             {account && <p className='account-info'>Connected Account: {account}</p>}\n//             {isOwner && <p className='owner-info'>You are the contract owner</p>}\n\n//         <div className='form-section'>\n//             <h2>Fetch Patient Records</h2>\n//             <input className='input-field' type='text' placeholder='Enter Patient ID' value={patientID} onChange={(e) => setPatientID(e.target.value)}/>\n//             <button className='action-button' onClick={fetchPatientRecords}>Fetch Records</button>\n//         </div>\n\n//         <div className=\"form-section\">\n//             <h2>Add Patient Record</h2>\n//             <input className='input-field' type='text' placeholder='Diagnosis' value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)}/>\n//             <input className='input-field' type='text' placeholder='Treatment' value={treatment} onChange={(e) => setTreatment(e.target.value)}/>\n//             <button className='action-button' onClick={addRecord}>Add Records</button>\n\n//         </div>\n//         <div className=\"form-section\">\n//             <h2>Authorize HealthCare Provider</h2>\n//             <input className='input-field' type= \"text\" placeholder='Provider Address' value = {providerAddress} onChange={(e) => setProviderAddress(e.target.value)}/>\n//             <button className='action-button' onClick={authorizeProvider}>Authorize Provider</button>\n//         </div>\n\n//         <div className='records-section'>\n//             <h2>Patient Records</h2>\n//             {patientRecords.map((record, index) => (\n//                 <div key = {index}>\n//                     <p>Record ID: {record.recordID.toNumber()}</p>\n//                     <p>Diagnosis: {record.diagnosis}</p>\n//                     <p>Treatment: {record.treatment}</p>\n//                     <p>Timestamp: {new Date(record.timestamp.toNumber() * 1000).toLocaleString()}</p>\n//             </div>\n//             ))}\n//         </div>\n\n//         </div>\n\n//     )\n\n// }\n\n// export default Healthcare;\n\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Healthcare = () => {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isOwner, setIsOwner] = useState(false);\n  const [patientID, setPatientID] = useState('');\n  const [diagnosis, setDiagnosis] = useState('');\n  const [treatment, setTreatment] = useState('');\n  const [patientRecords, setPatientRecords] = useState([]);\n  const [providerAddress, setProviderAddress] = useState('');\n  const contractAddress = \"0xD7ACd2a9FD159E69Bb102A1ca21C9a3e3A5F771B\";\n  const contractABI = [{\n    \"inputs\": [{\n      \"internalType\": \"uint256\",\n      \"name\": \"patientID\",\n      \"type\": \"uint256\"\n    }, {\n      \"internalType\": \"string\",\n      \"name\": \"patientName\",\n      \"type\": \"string\"\n    }, {\n      \"internalType\": \"string\",\n      \"name\": \"diagnosis\",\n      \"type\": \"string\"\n    }, {\n      \"internalType\": \"string\",\n      \"name\": \"treatment\",\n      \"type\": \"string\"\n    }],\n    \"name\": \"addRecord\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }, {\n    \"inputs\": [{\n      \"internalType\": \"address\",\n      \"name\": \"provider\",\n      \"type\": \"address\"\n    }],\n    \"name\": \"authorizeProvider\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }, {\n    \"inputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  }, {\n    \"inputs\": [],\n    \"name\": \"getOwner\",\n    \"outputs\": [{\n      \"internalType\": \"address\",\n      \"name\": \"\",\n      \"type\": \"address\"\n    }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }, {\n    \"inputs\": [{\n      \"internalType\": \"uint256\",\n      \"name\": \"patientID\",\n      \"type\": \"uint256\"\n    }],\n    \"name\": \"getPatientRecords\",\n    \"outputs\": [{\n      \"components\": [{\n        \"internalType\": \"uint256\",\n        \"name\": \"recordID\",\n        \"type\": \"uint256\"\n      }, {\n        \"internalType\": \"string\",\n        \"name\": \"patientName\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"string\",\n        \"name\": \"diagnosis\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"string\",\n        \"name\": \"treatment\",\n        \"type\": \"string\"\n      }, {\n        \"internalType\": \"uint256\",\n        \"name\": \"timestamp\",\n        \"type\": \"uint256\"\n      }],\n      \"internalType\": \"struct HealthcareRecords.Record[]\",\n      \"name\": \"\",\n      \"type\": \"tuple[]\"\n    }],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }];\n  useEffect(() => {\n    const connectWallet = async () => {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\n          await provider.send('eth_requestAccounts', []);\n          const signer = provider.getSigner();\n          setProvider(provider);\n          setSigner(signer);\n          const accountAddress = await signer.getAddress();\n          setAccount(accountAddress);\n          const contract = new ethers.Contract(contractAddress, contractABI, signer);\n          setContract(contract);\n          const ownerAddress = await contract.getOwner();\n          setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\n        } catch (error) {\n          console.error(\"Error connecting to wallet: \", error);\n        }\n      } else {\n        alert('Please install MetaMask or another Ethereum wallet extension to connect.');\n      }\n    };\n    connectWallet();\n  }, []);\n  const fetchPatientRecords = async () => {\n    try {\n      if (!patientID || isNaN(patientID)) {\n        alert(\"Please enter a valid Patient ID.\");\n        return;\n      }\n      const records = await contract.getPatientRecords(ethers.BigNumber.from(patientID));\n      console.log(\"Fetched Records:\", records); // Debugging: log the raw response\n\n      const formattedRecords = records.map(record => ({\n        recordID: record.recordID.toNumber(),\n        diagnosis: record.diagnosis,\n        treatment: record.treatment,\n        timestamp: new Date(record.timestamp.toNumber() * 1000).toLocaleString()\n      }));\n      console.log(\"Formatted Records:\", formattedRecords); // Debugging: log the formatted response\n\n      setPatientRecords(formattedRecords); // Update the state with formatted records\n    } catch (error) {\n      console.error(\"Error fetching patient records\", error);\n    }\n  };\n  const addRecord = async () => {\n    try {\n      if (!patientID || isNaN(patientID)) {\n        alert(\"Please enter a valid Patient ID.\");\n        return;\n      }\n      const tx = await contract.addRecord(ethers.BigNumber.from(patientID), \"Alice\", diagnosis, treatment);\n      await tx.wait();\n      alert(\"Record added successfully.\");\n      await fetchPatientRecords(); // Fetch updated records after adding\n    } catch (error) {\n      console.error(\"Error adding records\", error);\n    }\n  };\n  const authorizeProvider = async () => {\n    if (isOwner) {\n      try {\n        const tx = await contract.authorizeProvider(providerAddress);\n        await tx.wait();\n        alert(`Provider ${providerAddress} authorized successfully`);\n      } catch (error) {\n        console.error(\"Error authorizing provider\", error);\n      }\n    } else {\n      alert(\"Only the contract owner can authorize providers.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Healthcare Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 13\n    }, this), account && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"account-info\",\n      children: [\"Connected Account: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 25\n    }, this), isOwner && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"owner-info\",\n      children: \"You are the contract owner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Fetch Patient Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Enter Patient ID\",\n        value: patientID,\n        onChange: e => setPatientID(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: fetchPatientRecords,\n        children: \"Fetch Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Patient Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Diagnosis\",\n        value: diagnosis,\n        onChange: e => setDiagnosis(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Treatment\",\n        value: treatment,\n        onChange: e => setTreatment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: addRecord,\n        children: \"Add Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"records-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Patient Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 17\n      }, this), patientRecords.length > 0 ? patientRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Record ID: \", record.recordID]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Diagnosis: \", record.diagnosis]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Treatment: \", record.treatment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Timestamp: \", record.timestamp]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No records found for this Patient ID.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 9\n  }, this);\n};\n_s(Healthcare, \"JF8BBgb+ZKa9s4g1+7VirZY7MHs=\");\n_c = Healthcare;\nexport default Healthcare;\nvar _c;\n$RefreshReg$(_c, \"Healthcare\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","Healthcare","_s","provider","setProvider","signer","setSigner","contract","setContract","account","setAccount","isOwner","setIsOwner","patientID","setPatientID","diagnosis","setDiagnosis","treatment","setTreatment","patientRecords","setPatientRecords","providerAddress","setProviderAddress","contractAddress","contractABI","connectWallet","window","ethereum","providers","Web3Provider","send","getSigner","accountAddress","getAddress","Contract","ownerAddress","getOwner","toLowerCase","error","console","alert","fetchPatientRecords","isNaN","records","getPatientRecords","BigNumber","from","log","formattedRecords","map","record","recordID","toNumber","timestamp","Date","toLocaleString","addRecord","tx","wait","authorizeProvider","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","length","index","_c","$RefreshReg$"],"sources":["/Users/DT/Projects/Blockchain-Healthcare/src/Healthcare.js"],"sourcesContent":["// import React, {useState, useEffect} from 'react';\r\n// import {ethers} from 'ethers';\r\n\r\n// const Healthcare = () => {\r\n//     const [provider, setProvider] = useState(null);\r\n//     const [signer, setSigner] = useState(null);\r\n//     const [contract, setContract] = useState(null);\r\n//     const [account, setAccount] = useState(null);\r\n//     const [isOwner, setIsOwner] = useState(null);\r\n//     const [patientID, setPatientID] = useState('');\r\n//     const [diagnosis, setDiagnosis] = useState('');\r\n//     const [treatment, setTreatment] = useState('');\r\n//     const [patientRecords, setPatientRecords] = useState([]);\r\n\r\n\r\n//     const [providerAddress, setProviderAddress] = useState(\"\");\r\n//     const contractAddress = \"0xD7ACd2a9FD159E69Bb102A1ca21C9a3e3A5F771B\";\r\n\r\n//     const contractABI = [\r\n// \t{\r\n// \t\t\"inputs\": [\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"uint256\",\r\n// \t\t\t\t\"name\": \"patientID\",\r\n// \t\t\t\t\"type\": \"uint256\"\r\n// \t\t\t},\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"string\",\r\n// \t\t\t\t\"name\": \"patientName\",\r\n// \t\t\t\t\"type\": \"string\"\r\n// \t\t\t},\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"string\",\r\n// \t\t\t\t\"name\": \"diagnosis\",\r\n// \t\t\t\t\"type\": \"string\"\r\n// \t\t\t},\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"string\",\r\n// \t\t\t\t\"name\": \"treatment\",\r\n// \t\t\t\t\"type\": \"string\"\r\n// \t\t\t}\r\n// \t\t],\r\n// \t\t\"name\": \"addRecord\",\r\n// \t\t\"outputs\": [],\r\n// \t\t\"stateMutability\": \"nonpayable\",\r\n// \t\t\"type\": \"function\"\r\n// \t},\r\n// \t{\r\n// \t\t\"inputs\": [\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"address\",\r\n// \t\t\t\t\"name\": \"provider\",\r\n// \t\t\t\t\"type\": \"address\"\r\n// \t\t\t}\r\n// \t\t],\r\n// \t\t\"name\": \"authorizeProvider\",\r\n// \t\t\"outputs\": [],\r\n// \t\t\"stateMutability\": \"nonpayable\",\r\n// \t\t\"type\": \"function\"\r\n// \t},\r\n// \t{\r\n// \t\t\"inputs\": [],\r\n// \t\t\"stateMutability\": \"nonpayable\",\r\n// \t\t\"type\": \"constructor\"\r\n// \t},\r\n// \t{\r\n// \t\t\"inputs\": [],\r\n// \t\t\"name\": \"getOwner\",\r\n// \t\t\"outputs\": [\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"address\",\r\n// \t\t\t\t\"name\": \"\",\r\n// \t\t\t\t\"type\": \"address\"\r\n// \t\t\t}\r\n// \t\t],\r\n// \t\t\"stateMutability\": \"view\",\r\n// \t\t\"type\": \"function\"\r\n// \t},\r\n// \t{\r\n// \t\t\"inputs\": [\r\n// \t\t\t{\r\n// \t\t\t\t\"internalType\": \"uint256\",\r\n// \t\t\t\t\"name\": \"patientID\",\r\n// \t\t\t\t\"type\": \"uint256\"\r\n// \t\t\t}\r\n// \t\t],\r\n// \t\t\"name\": \"getPatientRecords\",\r\n// \t\t\"outputs\": [\r\n// \t\t\t{\r\n// \t\t\t\t\"components\": [\r\n// \t\t\t\t\t{\r\n// \t\t\t\t\t\t\"internalType\": \"uint256\",\r\n// \t\t\t\t\t\t\"name\": \"recordID\",\r\n// \t\t\t\t\t\t\"type\": \"uint256\"\r\n// \t\t\t\t\t},\r\n// \t\t\t\t\t{\r\n// \t\t\t\t\t\t\"internalType\": \"string\",\r\n// \t\t\t\t\t\t\"name\": \"patientName\",\r\n// \t\t\t\t\t\t\"type\": \"string\"\r\n// \t\t\t\t\t},\r\n// \t\t\t\t\t{\r\n// \t\t\t\t\t\t\"internalType\": \"string\",\r\n// \t\t\t\t\t\t\"name\": \"diagnosis\",\r\n// \t\t\t\t\t\t\"type\": \"string\"\r\n// \t\t\t\t\t},\r\n// \t\t\t\t\t{\r\n// \t\t\t\t\t\t\"internalType\": \"string\",\r\n// \t\t\t\t\t\t\"name\": \"treatment\",\r\n// \t\t\t\t\t\t\"type\": \"string\"\r\n// \t\t\t\t\t},\r\n// \t\t\t\t\t{\r\n// \t\t\t\t\t\t\"internalType\": \"uint256\",\r\n// \t\t\t\t\t\t\"name\": \"timestamp\",\r\n// \t\t\t\t\t\t\"type\": \"uint256\"\r\n// \t\t\t\t\t}\r\n// \t\t\t\t],\r\n// \t\t\t\t\"internalType\": \"struct HealthcareRecords.Record[]\",\r\n// \t\t\t\t\"name\": \"\",\r\n// \t\t\t\t\"type\": \"tuple[]\"\r\n// \t\t\t}\r\n// \t\t],\r\n// \t\t\"stateMutability\": \"view\",\r\n// \t\t\"type\": \"function\"\r\n// \t}\r\n// ];\r\n\r\n//     // useEffect(() => {\r\n//     //     const connectWallet = async () => {\r\n//     //         try {\r\n//     //             const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n//     //             await provider.send('eth_requestAccounts', []);\r\n//     //             const signer = provider.getSigner();\r\n//     //             setProvider(provider);\r\n//     //             setSigner(signer);\r\n\r\n//     //             const accountAddress = await signer.getAddress();\r\n//     //             setAccount(accountAddress);\r\n\r\n//     //             console.log(accountAddress);\r\n\r\n//     //             const contract = new ethers.Contract(contractAddress, contractABI, signer);\r\n//     //             setContract(contract);\r\n\r\n//     //             const ownerAddress = await contract.getOwner();\r\n\r\n//     //             setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\r\n\r\n               \r\n\r\n//     //         } catch (error) {\r\n//     //             console.error(\"Error connecting to wallet: \", error);\r\n//     //         }\r\n\r\n//     //     };\r\n//     //     connectWallet();\r\n\r\n//     // }, []);\r\n\r\n\r\n//     useEffect(() => {\r\n//     const connectWallet = async () => {\r\n//         try {\r\n//             if (typeof window.ethereum !== 'undefined') {\r\n//                 const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n//                 await provider.send('eth_requestAccounts', []);\r\n//                 const signer = provider.getSigner();\r\n//                 setProvider(provider);\r\n//                 setSigner(signer);\r\n\r\n//                 const accountAddress = await signer.getAddress();\r\n//                 setAccount(accountAddress);\r\n\r\n//                 console.log(accountAddress);\r\n\r\n//                 const contract = new ethers.Contract(contractAddress, contractABI, signer);\r\n//                 setContract(contract);\r\n\r\n//                 const ownerAddress = await contract.getOwner();\r\n//                 setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\r\n\r\n//             } else {\r\n//                 alert('Please install MetaMask or another Ethereum wallet extension to connect.');\r\n//             }\r\n\r\n//         } catch (error) {\r\n//             console.error(\"Error connecting to wallet: \", error);\r\n//         }\r\n//     };\r\n//     connectWallet();\r\n// }, []);\r\n\r\n\r\n\r\n//     const fetchPatientRecords = async () => {\r\n//         try {\r\n//             const records = await contract.getPatientRecords(patientID);\r\n//             console.log(records);\r\n//             setPatientRecords(records);\r\n\r\n//         } catch(error) {\r\n//             console.error(\"Error fetching patient records\", error);\r\n//         }\r\n//     }\r\n\r\n//     // const addRecord = async () => {\r\n//     //     try {\r\n//     //         const tx = await contract.addRecord(patientID, \"Alice\", diagnosis, treatment);\r\n//     //         await tx.wait();\r\n//     //         fetchPatientRecords();\r\n//     //         await tx.wait();\r\n//     //         alert(`Provider ${providerAddress} authorized successfully`);\r\n\r\n//     //     } catch(error) {\r\n//     //         console.error(\"Error adding records\", error);\r\n//     //     }\r\n\r\n//     // }\r\n\r\n//     const addRecord = async () => {\r\n//     try {\r\n//         // Ensure patientID is a valid number and not empty\r\n//         if (!patientID || isNaN(patientID)) {\r\n//             alert(\"Please enter a valid Patient ID.\");\r\n//             return;\r\n//         }\r\n\r\n//         const tx = await contract.addRecord(\r\n//             ethers.BigNumber.from(patientID), // Convert patientID to BigNumber\r\n//             \"Alice\", \r\n//             diagnosis, \r\n//             treatment\r\n//         );\r\n//         await tx.wait();\r\n//         fetchPatientRecords();\r\n//         alert(\"Record added successfully.\");\r\n\r\n//     } catch (error) {\r\n//         console.error(\"Error adding records\", error);\r\n//     }\r\n// };\r\n\r\n\r\n\r\n//     const authorizeProvider = async () => {\r\n//         if (isOwner){\r\n//             try {\r\n//                 const tx = await contract.authorizeProvider(providerAddress);\r\n//                 await tx.wait();\r\n//                 alert(`Provider ${providerAddress} authorized successfully`);\r\n\r\n//             } catch(error) {\r\n//                 console.error(\"Only contract owner can authorize different providers\");\r\n//             }\r\n//         } else {\r\n//             alert(\"Only contract owner can call this function\");\r\n//         }\r\n//     }\r\n\r\n//     return(\r\n//         <div className='container'>\r\n//             <h1 className = \"title\">HealthCare Application</h1>\r\n//             {account && <p className='account-info'>Connected Account: {account}</p>}\r\n//             {isOwner && <p className='owner-info'>You are the contract owner</p>}\r\n\r\n//         <div className='form-section'>\r\n//             <h2>Fetch Patient Records</h2>\r\n//             <input className='input-field' type='text' placeholder='Enter Patient ID' value={patientID} onChange={(e) => setPatientID(e.target.value)}/>\r\n//             <button className='action-button' onClick={fetchPatientRecords}>Fetch Records</button>\r\n//         </div>\r\n\r\n//         <div className=\"form-section\">\r\n//             <h2>Add Patient Record</h2>\r\n//             <input className='input-field' type='text' placeholder='Diagnosis' value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)}/>\r\n//             <input className='input-field' type='text' placeholder='Treatment' value={treatment} onChange={(e) => setTreatment(e.target.value)}/>\r\n//             <button className='action-button' onClick={addRecord}>Add Records</button>\r\n\r\n//         </div>\r\n//         <div className=\"form-section\">\r\n//             <h2>Authorize HealthCare Provider</h2>\r\n//             <input className='input-field' type= \"text\" placeholder='Provider Address' value = {providerAddress} onChange={(e) => setProviderAddress(e.target.value)}/>\r\n//             <button className='action-button' onClick={authorizeProvider}>Authorize Provider</button>\r\n//         </div>\r\n\r\n//         <div className='records-section'>\r\n//             <h2>Patient Records</h2>\r\n//             {patientRecords.map((record, index) => (\r\n//                 <div key = {index}>\r\n//                     <p>Record ID: {record.recordID.toNumber()}</p>\r\n//                     <p>Diagnosis: {record.diagnosis}</p>\r\n//                     <p>Treatment: {record.treatment}</p>\r\n//                     <p>Timestamp: {new Date(record.timestamp.toNumber() * 1000).toLocaleString()}</p>\r\n//             </div>\r\n//             ))}\r\n//         </div>\r\n\r\n//         </div>\r\n\r\n//     )\r\n\r\n// }\r\n\r\n// export default Healthcare;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\n\r\nconst Healthcare = () => {\r\n    const [provider, setProvider] = useState(null);\r\n    const [signer, setSigner] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n    const [account, setAccount] = useState(null);\r\n    const [isOwner, setIsOwner] = useState(false);\r\n    const [patientID, setPatientID] = useState('');\r\n    const [diagnosis, setDiagnosis] = useState('');\r\n    const [treatment, setTreatment] = useState('');\r\n    const [patientRecords, setPatientRecords] = useState([]);\r\n    const [providerAddress, setProviderAddress] = useState('');\r\n\r\n    const contractAddress = \"0xD7ACd2a9FD159E69Bb102A1ca21C9a3e3A5F771B\";\r\n    const contractABI = [\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"patientID\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"patientName\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"diagnosis\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"treatment\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"addRecord\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"provider\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"authorizeProvider\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"constructor\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"getOwner\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"patientID\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getPatientRecords\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"recordID\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"patientName\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"diagnosis\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"treatment\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"timestamp\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct HealthcareRecords.Record[]\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n];\r\n    useEffect(() => {\r\n        const connectWallet = async () => {\r\n            if (typeof window.ethereum !== 'undefined') {\r\n                try {\r\n                    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n                    await provider.send('eth_requestAccounts', []);\r\n                    const signer = provider.getSigner();\r\n                    setProvider(provider);\r\n                    setSigner(signer);\r\n\r\n                    const accountAddress = await signer.getAddress();\r\n                    setAccount(accountAddress);\r\n\r\n                    const contract = new ethers.Contract(contractAddress, contractABI, signer);\r\n                    setContract(contract);\r\n\r\n                    const ownerAddress = await contract.getOwner();\r\n                    setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\r\n                } catch (error) {\r\n                    console.error(\"Error connecting to wallet: \", error);\r\n                }\r\n            } else {\r\n                alert('Please install MetaMask or another Ethereum wallet extension to connect.');\r\n            }\r\n        };\r\n        connectWallet();\r\n    }, []);\r\n\r\n    const fetchPatientRecords = async () => {\r\n        try {\r\n            if (!patientID || isNaN(patientID)) {\r\n                alert(\"Please enter a valid Patient ID.\");\r\n                return;\r\n            }\r\n\r\n            const records = await contract.getPatientRecords(ethers.BigNumber.from(patientID));\r\n            console.log(\"Fetched Records:\", records);  // Debugging: log the raw response\r\n\r\n            const formattedRecords = records.map(record => ({\r\n                recordID: record.recordID.toNumber(),\r\n                diagnosis: record.diagnosis,\r\n                treatment: record.treatment,\r\n                timestamp: new Date(record.timestamp.toNumber() * 1000).toLocaleString()\r\n            }));\r\n\r\n            console.log(\"Formatted Records:\", formattedRecords);  // Debugging: log the formatted response\r\n\r\n            setPatientRecords(formattedRecords);  // Update the state with formatted records\r\n        } catch (error) {\r\n            console.error(\"Error fetching patient records\", error);\r\n        }\r\n    };\r\n\r\n    const addRecord = async () => {\r\n        try {\r\n            if (!patientID || isNaN(patientID)) {\r\n                alert(\"Please enter a valid Patient ID.\");\r\n                return;\r\n            }\r\n\r\n            const tx = await contract.addRecord(\r\n                ethers.BigNumber.from(patientID),\r\n                \"Alice\",\r\n                diagnosis,\r\n                treatment\r\n            );\r\n            await tx.wait();\r\n            alert(\"Record added successfully.\");\r\n            await fetchPatientRecords();  // Fetch updated records after adding\r\n        } catch (error) {\r\n            console.error(\"Error adding records\", error);\r\n        }\r\n    };\r\n\r\n    const authorizeProvider = async () => {\r\n        if (isOwner) {\r\n            try {\r\n                const tx = await contract.authorizeProvider(providerAddress);\r\n                await tx.wait();\r\n                alert(`Provider ${providerAddress} authorized successfully`);\r\n            } catch (error) {\r\n                console.error(\"Error authorizing provider\", error);\r\n            }\r\n        } else {\r\n            alert(\"Only the contract owner can authorize providers.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='container'>\r\n            <h1 className=\"title\">Healthcare Application</h1>\r\n            {account && <p className='account-info'>Connected Account: {account}</p>}\r\n            {isOwner && <p className='owner-info'>You are the contract owner</p>}\r\n\r\n            <div className='form-section'>\r\n                <h2>Fetch Patient Records</h2>\r\n                <input\r\n                    className='input-field'\r\n                    type='text'\r\n                    placeholder='Enter Patient ID'\r\n                    value={patientID}\r\n                    onChange={(e) => setPatientID(e.target.value)}\r\n                />\r\n                <button className='action-button' onClick={fetchPatientRecords}>Fetch Records</button>\r\n            </div>\r\n\r\n            <div className=\"form-section\">\r\n                <h2>Add Patient Record</h2>\r\n                <input\r\n                    className='input-field'\r\n                    type='text'\r\n                    placeholder='Diagnosis'\r\n                    value={diagnosis}\r\n                    onChange={(e) => setDiagnosis(e.target.value)}\r\n                />\r\n                <input\r\n                    className='input-field'\r\n                    type='text'\r\n                    placeholder='Treatment'\r\n                    value={treatment}\r\n                    onChange={(e) => setTreatment(e.target.value)}\r\n                />\r\n                <button className='action-button' onClick={addRecord}>Add Record</button>\r\n            </div>\r\n\r\n            {/* <div className=\"form-section\">\r\n                <h2>Authorize Healthcare Provider</h2>\r\n                <input\r\n                    className='input-field'\r\n                    type=\"text\"\r\n                    placeholder='Provider Address'\r\n                    value={providerAddress}\r\n                    onChange={(e) => setProviderAddress(e.target.value)}\r\n                />\r\n                <button className='action-button' onClick={authorizeProvider}>Authorize Provider</button>\r\n            </div> */}\r\n\r\n            <div className='records-section'>\r\n                <h2>Patient Records</h2>\r\n                {patientRecords.length > 0 ? (\r\n                    patientRecords.map((record, index) => (\r\n                        <div key={index}>\r\n                            <p>Record ID: {record.recordID}</p>\r\n                            <p>Diagnosis: {record.diagnosis}</p>\r\n                            <p>Treatment: {record.treatment}</p>\r\n                            <p>Timestamp: {record.timestamp}</p>\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <p>No records found for this Patient ID.</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Healthcare;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACuB,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACyB,eAAe,EAAEC,kBAAkB,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAM2B,eAAe,GAAG,4CAA4C;EACpE,MAAMC,WAAW,GAAG,CACvB;IACC,QAAQ,EAAE,CACT;MACC,cAAc,EAAE,SAAS;MACzB,MAAM,EAAE,WAAW;MACnB,MAAM,EAAE;IACT,CAAC,EACD;MACC,cAAc,EAAE,QAAQ;MACxB,MAAM,EAAE,aAAa;MACrB,MAAM,EAAE;IACT,CAAC,EACD;MACC,cAAc,EAAE,QAAQ;MACxB,MAAM,EAAE,WAAW;MACnB,MAAM,EAAE;IACT,CAAC,EACD;MACC,cAAc,EAAE,QAAQ;MACxB,MAAM,EAAE,WAAW;MACnB,MAAM,EAAE;IACT,CAAC,CACD;IACD,MAAM,EAAE,WAAW;IACnB,SAAS,EAAE,EAAE;IACb,iBAAiB,EAAE,YAAY;IAC/B,MAAM,EAAE;EACT,CAAC,EACD;IACC,QAAQ,EAAE,CACT;MACC,cAAc,EAAE,SAAS;MACzB,MAAM,EAAE,UAAU;MAClB,MAAM,EAAE;IACT,CAAC,CACD;IACD,MAAM,EAAE,mBAAmB;IAC3B,SAAS,EAAE,EAAE;IACb,iBAAiB,EAAE,YAAY;IAC/B,MAAM,EAAE;EACT,CAAC,EACD;IACC,QAAQ,EAAE,EAAE;IACZ,iBAAiB,EAAE,YAAY;IAC/B,MAAM,EAAE;EACT,CAAC,EACD;IACC,QAAQ,EAAE,EAAE;IACZ,MAAM,EAAE,UAAU;IAClB,SAAS,EAAE,CACV;MACC,cAAc,EAAE,SAAS;MACzB,MAAM,EAAE,EAAE;MACV,MAAM,EAAE;IACT,CAAC,CACD;IACD,iBAAiB,EAAE,MAAM;IACzB,MAAM,EAAE;EACT,CAAC,EACD;IACC,QAAQ,EAAE,CACT;MACC,cAAc,EAAE,SAAS;MACzB,MAAM,EAAE,WAAW;MACnB,MAAM,EAAE;IACT,CAAC,CACD;IACD,MAAM,EAAE,mBAAmB;IAC3B,SAAS,EAAE,CACV;MACC,YAAY,EAAE,CACb;QACC,cAAc,EAAE,SAAS;QACzB,MAAM,EAAE,UAAU;QAClB,MAAM,EAAE;MACT,CAAC,EACD;QACC,cAAc,EAAE,QAAQ;QACxB,MAAM,EAAE,aAAa;QACrB,MAAM,EAAE;MACT,CAAC,EACD;QACC,cAAc,EAAE,QAAQ;QACxB,MAAM,EAAE,WAAW;QACnB,MAAM,EAAE;MACT,CAAC,EACD;QACC,cAAc,EAAE,QAAQ;QACxB,MAAM,EAAE,WAAW;QACnB,MAAM,EAAE;MACT,CAAC,EACD;QACC,cAAc,EAAE,SAAS;QACzB,MAAM,EAAE,WAAW;QACnB,MAAM,EAAE;MACT,CAAC,CACD;MACD,cAAc,EAAE,mCAAmC;MACnD,MAAM,EAAE,EAAE;MACV,MAAM,EAAE;IACT,CAAC,CACD;IACD,iBAAiB,EAAE,MAAM;IACzB,MAAM,EAAE;EACT,CAAC,CACD;EACG3B,SAAS,CAAC,MAAM;IACZ,MAAM4B,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;QACxC,IAAI;UACA,MAAMxB,QAAQ,GAAG,IAAIL,MAAM,CAAC8B,SAAS,CAACC,YAAY,CAACH,MAAM,CAACC,QAAQ,CAAC;UACnE,MAAMxB,QAAQ,CAAC2B,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;UAC9C,MAAMzB,MAAM,GAAGF,QAAQ,CAAC4B,SAAS,CAAC,CAAC;UACnC3B,WAAW,CAACD,QAAQ,CAAC;UACrBG,SAAS,CAACD,MAAM,CAAC;UAEjB,MAAM2B,cAAc,GAAG,MAAM3B,MAAM,CAAC4B,UAAU,CAAC,CAAC;UAChDvB,UAAU,CAACsB,cAAc,CAAC;UAE1B,MAAMzB,QAAQ,GAAG,IAAIT,MAAM,CAACoC,QAAQ,CAACX,eAAe,EAAEC,WAAW,EAAEnB,MAAM,CAAC;UAC1EG,WAAW,CAACD,QAAQ,CAAC;UAErB,MAAM4B,YAAY,GAAG,MAAM5B,QAAQ,CAAC6B,QAAQ,CAAC,CAAC;UAC9CxB,UAAU,CAACoB,cAAc,CAACK,WAAW,CAAC,CAAC,KAAKF,YAAY,CAACE,WAAW,CAAC,CAAC,CAAC;QAC3E,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACxD;MACJ,CAAC,MAAM;QACHE,KAAK,CAAC,0EAA0E,CAAC;MACrF;IACJ,CAAC;IACDf,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMgB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACA,IAAI,CAAC5B,SAAS,IAAI6B,KAAK,CAAC7B,SAAS,CAAC,EAAE;QAChC2B,KAAK,CAAC,kCAAkC,CAAC;QACzC;MACJ;MAEA,MAAMG,OAAO,GAAG,MAAMpC,QAAQ,CAACqC,iBAAiB,CAAC9C,MAAM,CAAC+C,SAAS,CAACC,IAAI,CAACjC,SAAS,CAAC,CAAC;MAClF0B,OAAO,CAACQ,GAAG,CAAC,kBAAkB,EAAEJ,OAAO,CAAC,CAAC,CAAE;;MAE3C,MAAMK,gBAAgB,GAAGL,OAAO,CAACM,GAAG,CAACC,MAAM,KAAK;QAC5CC,QAAQ,EAAED,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAAC,CAAC;QACpCrC,SAAS,EAAEmC,MAAM,CAACnC,SAAS;QAC3BE,SAAS,EAAEiC,MAAM,CAACjC,SAAS;QAC3BoC,SAAS,EAAE,IAAIC,IAAI,CAACJ,MAAM,CAACG,SAAS,CAACD,QAAQ,CAAC,CAAC,GAAG,IAAI,CAAC,CAACG,cAAc,CAAC;MAC3E,CAAC,CAAC,CAAC;MAEHhB,OAAO,CAACQ,GAAG,CAAC,oBAAoB,EAAEC,gBAAgB,CAAC,CAAC,CAAE;;MAEtD5B,iBAAiB,CAAC4B,gBAAgB,CAAC,CAAC,CAAE;IAC1C,CAAC,CAAC,OAAOV,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAC1D;EACJ,CAAC;EAED,MAAMkB,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACA,IAAI,CAAC3C,SAAS,IAAI6B,KAAK,CAAC7B,SAAS,CAAC,EAAE;QAChC2B,KAAK,CAAC,kCAAkC,CAAC;QACzC;MACJ;MAEA,MAAMiB,EAAE,GAAG,MAAMlD,QAAQ,CAACiD,SAAS,CAC/B1D,MAAM,CAAC+C,SAAS,CAACC,IAAI,CAACjC,SAAS,CAAC,EAChC,OAAO,EACPE,SAAS,EACTE,SACJ,CAAC;MACD,MAAMwC,EAAE,CAACC,IAAI,CAAC,CAAC;MACflB,KAAK,CAAC,4BAA4B,CAAC;MACnC,MAAMC,mBAAmB,CAAC,CAAC,CAAC,CAAE;IAClC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,MAAMqB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAIhD,OAAO,EAAE;MACT,IAAI;QACA,MAAM8C,EAAE,GAAG,MAAMlD,QAAQ,CAACoD,iBAAiB,CAACtC,eAAe,CAAC;QAC5D,MAAMoC,EAAE,CAACC,IAAI,CAAC,CAAC;QACflB,KAAK,CAAC,YAAYnB,eAAe,0BAA0B,CAAC;MAChE,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD;IACJ,CAAC,MAAM;MACHE,KAAK,CAAC,kDAAkD,CAAC;IAC7D;EACJ,CAAC;EAED,oBACIxC,OAAA;IAAK4D,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtB7D,OAAA;MAAI4D,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAC;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChDxD,OAAO,iBAAIT,OAAA;MAAG4D,SAAS,EAAC,cAAc;MAAAC,QAAA,GAAC,qBAAmB,EAACpD,OAAO;IAAA;MAAAqD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvEtD,OAAO,iBAAIX,OAAA;MAAG4D,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAC;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAEpEjE,OAAA;MAAK4D,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzB7D,OAAA;QAAA6D,QAAA,EAAI;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BjE,OAAA;QACI4D,SAAS,EAAC,aAAa;QACvBM,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,kBAAkB;QAC9BC,KAAK,EAAEvD,SAAU;QACjBwD,QAAQ,EAAGC,CAAC,IAAKxD,YAAY,CAACwD,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,eACFjE,OAAA;QAAQ4D,SAAS,EAAC,eAAe;QAACY,OAAO,EAAE/B,mBAAoB;QAAAoB,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrF,CAAC,eAENjE,OAAA;MAAK4D,SAAS,EAAC,cAAc;MAAAC,QAAA,gBACzB7D,OAAA;QAAA6D,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3BjE,OAAA;QACI4D,SAAS,EAAC,aAAa;QACvBM,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,WAAW;QACvBC,KAAK,EAAErD,SAAU;QACjBsD,QAAQ,EAAGC,CAAC,IAAKtD,YAAY,CAACsD,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,eACFjE,OAAA;QACI4D,SAAS,EAAC,aAAa;QACvBM,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,WAAW;QACvBC,KAAK,EAAEnD,SAAU;QACjBoD,QAAQ,EAAGC,CAAC,IAAKpD,YAAY,CAACoD,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,eACFjE,OAAA;QAAQ4D,SAAS,EAAC,eAAe;QAACY,OAAO,EAAEhB,SAAU;QAAAK,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxE,CAAC,eAcNjE,OAAA;MAAK4D,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5B7D,OAAA;QAAA6D,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACvB9C,cAAc,CAACsD,MAAM,GAAG,CAAC,GACtBtD,cAAc,CAAC8B,GAAG,CAAC,CAACC,MAAM,EAAEwB,KAAK,kBAC7B1E,OAAA;QAAA6D,QAAA,gBACI7D,OAAA;UAAA6D,QAAA,GAAG,aAAW,EAACX,MAAM,CAACC,QAAQ;QAAA;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnCjE,OAAA;UAAA6D,QAAA,GAAG,aAAW,EAACX,MAAM,CAACnC,SAAS;QAAA;UAAA+C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpCjE,OAAA;UAAA6D,QAAA,GAAG,aAAW,EAACX,MAAM,CAACjC,SAAS;QAAA;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpCjE,OAAA;UAAA6D,QAAA,GAAG,aAAW,EAACX,MAAM,CAACG,SAAS;QAAA;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAJ9BS,KAAK;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKV,CACR,CAAC,gBAEFjE,OAAA;QAAA6D,QAAA,EAAG;MAAqC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC9C;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC/D,EAAA,CAlRID,UAAU;AAAA0E,EAAA,GAAV1E,UAAU;AAoRhB,eAAeA,UAAU;AAAC,IAAA0E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}